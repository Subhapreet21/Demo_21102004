Q) What is GitHub?
A)
-GitHub is a website which is used to store the data permanently
-It gives us collaboration
-it gives us a visual experience of the repositories

Q) What is Git?
A)
-Git is a version control system used to track the changes in the files or folders

Q) Git commands
A)
-To set up your path in git bash=>(cd "file_path")
-Initialize the empty git repository in the local machine=>(git init)
-To convert untracked file to tracked file and add to staging area=>(git add filename)
-This is used to write commit message and to local repo=>(git commit -m "msg")
-This is used to push the code from local repo to remote repo=>(git push url)
-This command is used to take a copy of remote repo into local repo=>(git clone url)
-git config --global user.email "subhapreetpatro2004@gmail.com"
-git config --global user.name "Subhapreet21"
-Git initialization in the folder=>(git init)
-git status
-To add all the files in a particular folder=>(git add .)
-To link your local repo to your remote repo=>(git remote add origin [url_from_github])
-To push your files from the local repo to the remote repo=>(git push -u origin master)


http://vpaste.net/j0Atr
------------------------------------------------------------------------------------------------------------------------------------------

Q) What is HTML?
A)
-Hyper Text Markup Language
-Used to create a basic structure of a web page

##Execution

subha@SubhapreetPatro MINGW64 ~
$ git config --global user.email "subhapreetpatro2004@gmail.com"

subha@SubhapreetPatro MINGW64 ~
$ git config --global user.name "Subhapreet21"

subha@SubhapreetPatro MINGW64 ~
$ ^C


subha@SubhapreetPatro MINGW64 ~
$ git status
fatal: not a git repository (or any of the parent directories): .git

subha@SubhapreetPatro MINGW64 ~
$ cd c/Engineering Third Year
bash: cd: too many arguments

subha@SubhapreetPatro MINGW64 ~
$ cd /c/

subha@SubhapreetPatro MINGW64 /c
$ cd /Engineering Third Year/Semester 6/Campus Recruitment Training
bash: cd: too many arguments

subha@SubhapreetPatro MINGW64 /c
$ cd /Engineering Third Year/Semester 6/Campus Recruitment Training/
bash: cd: too many arguments

subha@SubhapreetPatro MINGW64 /c
$ cd /Engineering Third Year/
bash: cd: too many arguments

subha@SubhapreetPatro MINGW64 /c
$ cd "/Engineering Third Year/Semester 6/Campus Recruitment Training/"
bash: cd: /Engineering Third Year/Semester 6/Campus Recruitment Training/: No such file or directory

subha@SubhapreetPatro MINGW64 /c
$ cd "/Engineering Third Year/"
bash: cd: /Engineering Third Year/: No such file or directory

subha@SubhapreetPatro MINGW64 /c
$ cd "C:\Engineering Third Year\Semester 6\Campus Recruitment Training"

subha@SubhapreetPatro MINGW64 /c/Engineering Third Year/Semester 6/Campus Recruitment Training
$ git init
Initialized empty Git repository in C:/Engineering Third Year/Semester 6/Campus Recruitment Training/.git/

subha@SubhapreetPatro MINGW64 /c/Engineering Third Year/Semester 6/Campus Recruitment Training (master)
$ git status
On branch master

No commits yet

Untracked files:
  (use "git add <file>..." to include in what will be committed)
        Notes.txt
        Working of Git.jpg

nothing added to commit but untracked files present (use "git add" to track)

subha@SubhapreetPatro MINGW64 /c/Engineering Third Year/Semester 6/Campus Recruitment Training (master)
$ git add .

subha@SubhapreetPatro MINGW64 /c/Engineering Third Year/Semester 6/Campus Recruitment Training (master)
$ git status
On branch master

No commits yet

Changes to be committed:
  (use "git rm --cached <file>..." to unstage)
        new file:   Notes.txt
        new file:   Working of Git.jpg


subha@SubhapreetPatro MINGW64 /c/Engineering Third Year/Semester 6/Campus Recruitment Training (master)
$ git commit -m "Files are added"
[master (root-commit) abbc428] Files are added
 2 files changed, 27 insertions(+)
 create mode 100644 Notes.txt
 create mode 100644 Working of Git.jpg

subha@SubhapreetPatro MINGW64 /c/Engineering Third Year/Semester 6/Campus Recruitment Training (master)
$ git remote add origin https://github.com/Subhapreet21/Demo_21102004.git

subha@SubhapreetPatro MINGW64 /c/Engineering Third Year/Semester 6/Campus Recruitment Training (master)
$ git push -u origin master
info: please complete authentication in your browser...
Enumerating objects: 4, done.
Counting objects: 100% (4/4), done.
Delta compression using up to 12 threads
Compressing objects: 100% (4/4), done.
Writing objects: 100% (4/4), 56.68 KiB | 28.34 MiB/s, done.
Total 4 (delta 0), reused 0 (delta 0), pack-reused 0 (from 0)
To https://github.com/Subhapreet21/Demo_21102004.git
 * [new branch]      master -> master
branch 'master' set up to track 'origin/master'.

subha@SubhapreetPatro MINGW64 /c/Engineering Third Year/Semester 6/Campus Recruitment Training (master)
$


http://vpaste.net/oTM6T

------------------------------------------------------------------------------------------------------------------------------------------

##JavaScript##

1)Static Websites: These pages are created with fixed content that is the same for all users. They are built using HTML, CSS, and JavaScript, and don't use a database or server-side scripting languages. Static pages are good for projects with infrequent content changes, like a small business's online brochure. Ex: Facebook login page

2)Dynamic websites: These pages can change based on the user, the time, or other factors. They are built using back-end code and server-side languages like PHP, Ruby, Python, or server-side JavaScript. Dynamic pages are designed for continuous content management, like a news portal. Ex: YouTube recommendations, Google maps, Cricbuzz(scores)

Variables:
-Used to store data/values/literals
-Variables are used to store the data
-They can store any kind of data
-While taking the same variable names, the latest value will be considered
-Variables can start with letters,_,$(For JS)
-Variables can't start with numbers
-Variables can include letters, numbers,_,$
-Variables are Case sensitive
-Space between two variables are not allowed

Types of variables:
1)var :- Redeclaration and reinitialization possible
2)let :- Only reinitialization possible
3)const :- Both are not possible

Ex:
var username="Rakesh"
console.log(username);

Here-->var:-variable
       username:-identifier(Name given for the memory block)
       Rakesh:-value/data
   
-Extension of JavaScript file:-  .js

*In the browser, if we want to run javascript file or css file we must connect those files with html file.*

consol.log(): It is a method to print the output in the developer console
document.writeln(): It is a method used to print the output on the UI

Q) What is a comment?
A)
-Comments are the ignored lines by the browser
-To give information to the developer

#Types:
html: <!-- hjadsb,k --!>
css: /* jhv,bjsd,b */
javascript: Single-line: //
            Multi-line: /**/

Q) What is a data type?
A)
-Used to specify what kind of data is stored in the variable.

#Types:
1) Primitive data types:-
-They are built-in
-They are immutable
-They can store only a single value
	-String
	-Number
	-Boolean
	-Undefined
	-Null
	-Symbol
	-bigint

##String
-It is a sequence of characters enclosed within "", '', ``(template literals/backticks)

##Number
-Range: -2^53-1 to +2^53-1 . Upto this range we consider as number data type. Beyond this range it will be bigint.

##Boolean(True/False)

##Undefined: Variables are declared but not initialized with the value

##Null: Empty value or the absence of an object
-Return type of null is 'object'

##bigint: Any value exceeding the range of number data type/ Any value suffixed with n

##Symbol


2) Non-Primitive data types:-
-They are user defined
-They are mutable
-They can store multiple values
	-Object(math, date, json)
	-Array
	-Functions

http://vpaste.net/KCi68
http://vpaste.net/JvF1F

--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

#Operators:
-Operators are special symbols used to perform some operations on operands.
Ex: 10(operand1) +(opertor) 20(operand2)

Types of operators:
-Unary
-Binary
-Ternary(operand1 ? operand2 : operand3)

1) Arithmetic operators
2) Assignment operators
3) Relational operators
4) Logical operators

(1) Arithmetic operators:
-Addition(+)
-Subtraction(-)
-Multiplication(*)
-Division(/)
-Modulus(%)
-Increment(++): Increment will happen with one value
	-Pre Increment(++a): Increment before execution
	-Post Increment(a++): Increment after execution
-Decrement(--): Decrement will happen with one value
	-Pre Decrement(--a): Decrement before execution
	-Post Decrement(a--): Decrement after execution
-Exponentiation(**)

Concatenation: Adding two or more strings
Typecasting: Converting one data type to another data type
NaN: Not a Number: It is a property of the global object. It represents a value which is not a number.

(2) Assignment operators:
-'=', '+=', '-=', '*=', '/=', '%=', '**='

(3) Relational operators:
-Used to compare two values.
-Return type: Boolean
-Ex:>, <, >=, <=, ==, ===(strictly equal to), !=, !==(strictly not equal to)

Q) What is the difference between == and ===?
A)
== -> It is used to compare the values
=== -> It is used to compare the values and the data types
!= -> It is used to compare the values
!== -> It is used to compare the values and the data types

(4) Logical operators:
AND(&&): If both the conditions are true then the output will be true
OR(||): If any one of the conditions is true or both the conditions are true then the output will be true
NOT(!): If the condition is true then the output will be false and vice versa

#Decision Making Statements:
-Used to make decisions based on the conditions
-Types:
1) if: It will work for true statements
2) if-else
3) else-if ladder
4) switch
5) ternary operator

prompt(): This method is used to collect the data from the user. It will display a dialog box with the message and the input field.

#Looping Statements:
-to execute the block of code repeatedly
1) for loop
-Will be used when the exact iteration count is known
Syntax:
for(initialization; condition; increment/decrement){
	//code
}
2) while loop
-Will be used when we don't know the iteration count
Syntax:
while(condition){
	//code
}
3) do-while loop
-Will be used when we don't know the iteration count
Syntax:
do{
	//code
}while(condition)

Q) What are entry control and exit control loops?
A)
Entry control loops(for and while loops): The condition is checked at the beginning of the loop. If the condition is false then the loop will not be executed.
Exit control loops(do-while loop): The condition is checked at the end of the loop. If the condition is false then the loop will be executed at least once.

Minimum iteration count of for loop: 0
Minimum iteration count of while loop: 0
Minimum iteration count of do-while loop: 1

Q) What is the difference between break and continue?
A)
break: It is used to terminate the loop when the condition is met.
continue: It is used to skip the current iteration and move to the next iteration when the condition is met.

#Functions:
-Functions are the block of code that is used to perform a specific task.
-Function is a non primitive data type
-It is used to avoid the repetition of the code.
-It is reusable.
-It is used to make the code more readable and maintainable.

Syntax:
function function_name(optional parameters){
	//code
}
function_name(arguments);

Types of functions:
1) Named function: It is a function that has a name and invoked with the same name.
2) Anonymous function: It is a function that doesn't have a name to declare and to invoke.
3) Function expression: It is a function that is assigned to a variable and invoked with the same variable.
4) Immediate invoking function expression(IIFE): It is a function that is called immediately after the declaration. It can be invoked only once.
5) Arrow function: It is a function that is used to concise the normal function syntax.
Syntax:
()=>{};
-It is similar to Anonymous function.
var function_name = (parameters) => {
	//code
}
6) Higher order function: A function that takes another function as an argument or returns a function.
7) Callback function: A function that is passed as an argument to another function(HOF).

-Closure: Closure is a memory block where functions are bundled together/functions are nested together by giving accessibility to the inner most function to access the variables of the outer most function.


#ES6
-Current version of JavaScript is ES14.
-ES6 is a stable version of JavaScript.
ES-ECMAScript
ECMA-European Computer Manufacturers Association

Q) What is return keyword?
A)
-It is used to return the expression ,variables or the value from the function.
-It is used to stop the execution of the function.


#Arrays:
-Collection of items or values.
-It is a non primitive data type.
-It can store both homogeneous and heterogeneous data.
-It can store multiple values within a single variable.

Syntax:[]
var array_name = [value1, value2, value3, value4];

Ex:

Q) map and forEach difference
A)
-map: It is used to iterate the values of the array one by one. If we return the value, it returns new copied array.
-forEach: It is used to iterate the values of the array one by one. It will not return anything (undefined).

methods in array:
-push(): It is used to add the elements at the end of the array.
-pop(): It is used to remove the elements from the end of the array.
-shift(): It is used to remove the elements from the beginning of the array.
-unshift(): It is used to add the elements at the beginning of the array.
-splice(): It is used to add or remove the elements from the array.
-slice(): It is used to copy the elements from the array.
-concat(): It is used to merge two or more arrays.
-reverse(): It is used to reverse the elements of the array.
-join(): It is used to join the elements of the array with the specified separator.

Q) What is Object?
A)
-Object is an entity which is used to store the values in key-value pairs.
-Object is a physical entity which has states(attributes/properties) and behaviors(methods)

Syntax:
let obj={};

-Note: Object based language+OOPs

Ex:
let obj = {
	name:"Sam"
	age:25
}

#JSON:
-JSON stands for JavaScript Object Notation.
-It is a lightweight technique used to transmit the data from client to server and server to client
Syntax:
{
	"key":"value"
}
-For JSON no need to store it inside variable
-Both key and values should be double quoted except for numerical values

methods:
-parseJSON(): It is used to convert the JSON string into the JavaScript object.
-stringify(): It is used to convert the JavaScript object into the JSON string.